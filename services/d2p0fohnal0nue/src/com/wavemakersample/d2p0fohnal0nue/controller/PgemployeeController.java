/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.wavemakersample.d2p0fohnal0nue.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.wavemakersample.d2p0fohnal0nue.Pgemployee;
import com.wavemakersample.d2p0fohnal0nue.service.PgemployeeService;

/**
 * Controller object for domain model class Pgemployee.
 * @see Pgemployee
 */
@RestController("d2p0fohnal0nue.PgemployeeController")
@Api(value = "PgemployeeController", description = "Exposes APIs to work with Pgemployee resource.")
@RequestMapping("/d2p0fohnal0nue/Pgemployee")
public class PgemployeeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PgemployeeController.class);

    @Autowired
    @Qualifier("d2p0fohnal0nue.PgemployeeService")
    private PgemployeeService pgemployeeService;

    @ApiOperation(value = "Creates a new Pgemployee instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Pgemployee createPgemployee(@RequestBody Pgemployee pgemployee) {
        LOGGER.debug("Create Pgemployee with information: {}", pgemployee);
        pgemployee = pgemployeeService.create(pgemployee);
        LOGGER.debug("Created Pgemployee with information: {}", pgemployee);
        return pgemployee;
    }

    @ApiOperation(value = "Returns the Pgemployee instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Pgemployee getPgemployee(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Pgemployee with id: {}", id);
        Pgemployee foundPgemployee = pgemployeeService.getById(id);
        LOGGER.debug("Pgemployee details with id: {}", foundPgemployee);
        return foundPgemployee;
    }

    @ApiOperation(value = "Updates the Pgemployee instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Pgemployee editPgemployee(@PathVariable("id") Integer id, @RequestBody Pgemployee pgemployee) throws EntityNotFoundException {
        LOGGER.debug("Editing Pgemployee with id: {}", pgemployee.getId());
        pgemployee.setId(id);
        pgemployee = pgemployeeService.update(pgemployee);
        LOGGER.debug("Pgemployee details with id: {}", pgemployee);
        return pgemployee;
    }

    @ApiOperation(value = "Deletes the Pgemployee instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePgemployee(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Pgemployee with id: {}", id);
        Pgemployee deletedPgemployee = pgemployeeService.delete(id);
        return deletedPgemployee != null;
    }

    /**
     * @deprecated Use {@link #findPgemployees(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Pgemployee instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Pgemployee> searchPgemployeesByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Pgemployees list");
        return pgemployeeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of Pgemployee instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Pgemployee> findPgemployees(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Pgemployees list");
        return pgemployeeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPgemployees(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return pgemployeeService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of Pgemployee instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countPgemployees(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Pgemployees");
        return pgemployeeService.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PgemployeeService instance
	 */
    protected void setPgemployeeService(PgemployeeService service) {
        this.pgemployeeService = service;
    }
}
