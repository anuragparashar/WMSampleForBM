/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.wavemakersample.d2p0fohnal0nue.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.wavemakersample.d2p0fohnal0nue.Pgemployee;


/**
 * ServiceImpl object for domain model class Pgemployee.
 *
 * @see Pgemployee
 */
@Service("d2p0fohnal0nue.PgemployeeService")
public class PgemployeeServiceImpl implements PgemployeeService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PgemployeeServiceImpl.class);


    @Autowired
    @Qualifier("d2p0fohnal0nue.PgemployeeDao")
    private WMGenericDao<Pgemployee, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Pgemployee, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "d2p0fohnal0nueTransactionManager")
    @Override
	public Pgemployee create(Pgemployee pgemployee) {
        LOGGER.debug("Creating a new Pgemployee with information: {}", pgemployee);
        Pgemployee pgemployeeCreated = this.wmGenericDao.create(pgemployee);
        return pgemployeeCreated;
    }

	@Transactional(readOnly = true, value = "d2p0fohnal0nueTransactionManager")
	@Override
	public Pgemployee getById(Integer pgemployeeId) throws EntityNotFoundException {
        LOGGER.debug("Finding Pgemployee by id: {}", pgemployeeId);
        Pgemployee pgemployee = this.wmGenericDao.findById(pgemployeeId);
        if (pgemployee == null){
            LOGGER.debug("No Pgemployee found with id: {}", pgemployeeId);
            throw new EntityNotFoundException(String.valueOf(pgemployeeId));
        }
        return pgemployee;
    }

    @Transactional(readOnly = true, value = "d2p0fohnal0nueTransactionManager")
	@Override
	public Pgemployee findById(Integer pgemployeeId) {
        LOGGER.debug("Finding Pgemployee by id: {}", pgemployeeId);
        return this.wmGenericDao.findById(pgemployeeId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "d2p0fohnal0nueTransactionManager")
	@Override
	public Pgemployee update(Pgemployee pgemployee) throws EntityNotFoundException {
        LOGGER.debug("Updating Pgemployee with information: {}", pgemployee);
        this.wmGenericDao.update(pgemployee);

        Integer pgemployeeId = pgemployee.getId();

        return this.wmGenericDao.findById(pgemployeeId);
    }

    @Transactional(value = "d2p0fohnal0nueTransactionManager")
	@Override
	public Pgemployee delete(Integer pgemployeeId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Pgemployee with id: {}", pgemployeeId);
        Pgemployee deleted = this.wmGenericDao.findById(pgemployeeId);
        if (deleted == null) {
            LOGGER.debug("No Pgemployee found with id: {}", pgemployeeId);
            throw new EntityNotFoundException(String.valueOf(pgemployeeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "d2p0fohnal0nueTransactionManager")
	@Override
	public Page<Pgemployee> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Pgemployees");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "d2p0fohnal0nueTransactionManager")
    @Override
    public Page<Pgemployee> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Pgemployees");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "d2p0fohnal0nueTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service d2p0fohnal0nue for table Pgemployee to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "d2p0fohnal0nueTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }



}

